from diffusers import StableDiffusionPipeline
import torch
import os
from flask import Flask, request, send_file
from pyngrok import ngrok
import subprocess

# ספריית RIFE (רק פעם ראשונה)
if not os.path.exists("RIFE"):
    !git clone https://github.com/megvii-research/ECCV2022-RIFE RIFE
    %cd RIFE
    !pip install -r requirements.txt
    %cd ..

app = Flask(__name__)

FRAMES_DIR = "/content/frames"
INTERP_DIR = "/content/interpolated"
os.makedirs(FRAMES_DIR, exist_ok=True)
os.makedirs(INTERP_DIR, exist_ok=True)

# Pipeline של Stable Diffusion
pipe = StableDiffusionPipeline.from_pretrained(
    "runwayml/stable-diffusion-v1-5",
    torch_dtype=torch.float16
).to("cuda")

# פונקציה ליצירת פריימים ראשיים
def generate_base_frames(description, num_frames=8):
    frame_paths = []
    for i in range(num_frames):
        image = pipe(description, guidance_scale=7.5).images[0]
        frame_path = os.path.join(FRAMES_DIR, f"frame_{i:03d}.png")
        image.save(frame_path)
        frame_paths.append(frame_path)
        print("✅ Saved base frame:", frame_path)
    return frame_paths

# פונקציה להרצת RIFE לאינטרפולציה
def interpolate_frames(input_dir, output_dir, exp=4):
    # exp=4 אומר "להכפיל פי 2^4 = 16 פריימים"
    cmd = f"python3 RIFE/inference_video.py --img {input_dir} --exp {exp} --output {output_dir}"
    subprocess.run(cmd, shell=True, check=True)
    print("✨ Interpolation done, frames in:", output_dir)

# פונקציה לחיבור לוידאו
def create_video_from_frames(frames_dir, output_path, fps=15):
    ffmpeg_cmd = f"ffmpeg -r {fps} -i {frames_dir}/%08d.png -vcodec libx264 -pix_fmt yuv420p {output_path} -y"
    os.system(ffmpeg_cmd)
    print("🎬 Final video saved:", output_path)

def generate_animated_video(description):
    # 1. יצירת בסיס
    generate_base_frames(description, num_frames=8)

    # 2. אינטרפולציה
    interpolate_frames(FRAMES_DIR, INTERP_DIR, exp=4)

    # 3. יצירת סרטון באורך ~20 שניות
    video_path = os.path.join(INTERP_DIR, "final.mp4")
    create_video_from_frames(INTERP_DIR, video_path, fps=15)
    return video_path

@app.route("/generate", methods=["POST"])
def generate():
    data = request.json
    description = data.get("description")
    if not description:
        return {"error": "No description provided"}, 400

    video_path = generate_animated_video(description)
    return {"video_url": f"{public_url}/video"}

@app.route("/video")
def get_video():
    return send_file(os.path.join(INTERP_DIR, "final.mp4"), mimetype="video/mp4")

# ngrok
public_url = ngrok.connect(5000)
print("Public URL:", public_url)
app.run(host="0.0.0.0", port=5000)
